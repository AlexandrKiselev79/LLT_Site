@model Nop.Plugin.Misc.LLT.Models.Tournament.TournamentDetailsModel

@using Nop.Plugin.Misc.LLT.Enums
@using Nop.Core.Infrastructure
@using Nop.Web.Framework.UI;
@using Nop.Web.Framework.Events
@using Nop.Services.Events
@{
    Html.AddScriptParts("~/Scripts/jquery.tmpl.min.js");
}
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.GeneralInfo.Id)

<div id="tournament-edit">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            Информация
        </li>
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            Игроки
        </li>
        <li @Html.RenderSelectedTabIndex(2, GetSelectedTabIndex())>
            Матчи
        </li>
        <li @Html.RenderSelectedTabIndex(3, GetSelectedTabIndex())>
            Результаты
        </li>
    </ul>
    <div>
        @TabInfo()
    </div>
    <div>
        @TabPlayers()
    </div>
    <div>
        @TabMatches()
    </div>
    <div>
        @TabResults()
    </div>
</div>
<script>
    $(document).ready(function() {
        disableFormSubmitOnEnter();

        $("#tournament-edit").kendoTabStrip({
            animation:  {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });

        initPlayersGrid();
        initMatchesGrid();
        initResultsGrid();
    });

    var lastRemovedMatchPlayers = {};
    var lastRemovedMatchPlayerIndeces = {};
    var allPlayers = undefined;

    function genericDropDownEditor(container, options, dataSource, selectedItemId) {
        $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:' + options.field + '"/>')
            .appendTo(container)
            .kendoDropDownList({
                dataSource: dataSource,
                dataTextField: "Name",
                dataValueField: "Id"
            });

        if (options.model.isNew() && selectedItemId) {
            var dropdown = $(container).find('input').data("kendoDropDownList");
            dropdown.select(selectedItemId);
            options.model.Stage = selectedItemId;
        }
    }

    function playerDropDownFiltered(container, options, dropDownId) {
        $('<select id="' + dropDownId + '" class="player-select"></select>')
            .appendTo(container)
            .multipleSelect({
                filter: true,
                width: '100%',
                single: true,
                placeholder: "Выбор игрока",
                onClick: function (option) {
                    var newPlayerId = parseInt(option.value);
                    if (dropDownId === "tournamentPlayerList") {
                        options.model[options.field] = newPlayerId;
                    }
                    else {
                        if (options.model.isNew()) {
                            options.model[options.field] = { Id: newPlayerId };
                        }
                        else {
                            options.model[options.field].Id = newPlayerId;
                        }
                    }
                    options.model.dirty = true;
                }
            })
            .closest('td').css('overflow', 'visible');

        getAllPlayers().then(function() {
            var optionsHtml = [];
            if (allPlayers && allPlayers.length) {
                allPlayers.forEach(function(player) {
                    optionsHtml.push('<option value="' + player.Id + '">' + player.FullName + '</option>');
                });
            }
            $('#' + dropDownId).html(optionsHtml.join(''));
            $('#' + dropDownId).multipleSelect("refresh");

            var selectedIds = options.field === 'Player1' && options.model.Player1.Id ? [options.model.Player1.Id] :
                             options.field === 'Player2' && options.model.Player2.Id ? [options.model.Player2.Id] : [];

            $('#' + dropDownId).multipleSelect('setSelects', selectedIds);
        });
    }

    function filterPlayersList(dropDownId) {
        var hiddenIds = [];

        var select =$('#' + dropDownId);
        if(dropDownId === 'tournamentPlayerList'){

        }
        else if (dropDownId.indexOf('tournamentMatchPlayer') === 0){

        }

        hiddenIds.forEach();
    }

    function filterTournamentPlayersList($dropDownWrapper) {
        if($dropDownWrapper.find('#tournamentPlayersList').length !== 1){
            return;
        }

        var currentPlayers = $("#tournament-players-grid").data('kendoGrid').dataSource.data();
        var listedPlayers = $('#tournamentPlayersList').data('kendoDropDownList').dataSource.data();

        currentPlayers.forEach(function(currentPlayer) {
            listedPlayers.forEach(function(listedPlayer) {
                if (listedPlayer && currentPlayer.dirty === false && currentPlayer.Id && listedPlayer.Id === currentPlayer.Id) {
                    listedPlayers.remove(listedPlayer);
                }
            });
        });
    }

    function filterTournamentMatchPlayersList($dropDownWrapper) {
        var currentListId = '';
        if($dropDownWrapper.find('#tournamentMatchPlayer1List').length === 1){
            currentListId = 'tournamentMatchPlayer1List';
        }
        else if($dropDownWrapper.find('#tournamentMatchPlayer2List').length === 1){
            currentListId = 'tournamentMatchPlayer2List';
        }

        if (!currentListId) {
            return;
        }

        var theOtherListId = currentListId === 'tournamentMatchPlayer1List' ? 'tournamentMatchPlayer2List' : 'tournamentMatchPlayer1List';
        var theOtherList = $('#' + theOtherListId).data('kendoDropDownList');
        var theOtherListPlayers = theOtherList.dataSource.data();

        if (lastRemovedMatchPlayers[theOtherListId]) {
            var index = lastRemovedMatchPlayerIndeces[theOtherListId] !== undefined ? lastRemovedMatchPlayerIndeces[theOtherListId] : 0;
            theOtherListPlayers.splice(index, 0, lastRemovedMatchPlayers[theOtherListId]);
        }

        var selectedValue = $('#' + currentListId).data('kendoDropDownList')._selectedValue;
        if (selectedValue.length === 0) {
            return;
        }

        var selectedId = parseInt(selectedValue);
        theOtherListPlayers.forEach(function(theOtherListPlayer, index) {
            if (theOtherListPlayer && theOtherListPlayer.Id === selectedId) {
                lastRemovedMatchPlayers[theOtherListId] = theOtherListPlayer;
                lastRemovedMatchPlayerIndeces[theOtherListId] = index;
                theOtherListPlayers.remove(theOtherListPlayer);
            }
        });
    }

    function getAllPlayers() {
        var deferred = jQuery.Deferred();
        if (allPlayers === undefined) {
            $.ajax({
                url: '/Players',
                data: JSON.stringify({Model: {},Command: { Page: 0, PageSize: 0 }}),
                dataType: "json",
                type: "POST",
                contentType: 'application/json',
            }).done(function (response) {
                allPlayers = response.Data;
                deferred.resolve(allPlayers);
            });
        }
        else{
            deferred.resolve(allPlayers);
        }

        return deferred;
    }

    function completeMatch(triggerElement, title, okCallback) {
        if ($(triggerElement).parent().find('.popover').length === 0) {
            var popupHtml = [];
            popupHtml.push('    <div class="content">');
            popupHtml.push('        <div class="form-group">');
            popupHtml.push('            <input type="text" class="form-control" placeholder=""/>');
            popupHtml.push('        </div>');
            popupHtml.push('        <div class="form-group">');
            popupHtml.push('            <label><input type="radio" class="form-control" name="winner" value="Player1" checked="checked"/>Player 1</label>');
            popupHtml.push('            <label><input type="radio" class="form-control" name="winner" value="Player2"/>Player 2</label>');
            popupHtml.push('        </div>');
            popupHtml.push('        <span class="validation-message" style="display:none;color:red;">Заполните обязательное поле</span>');
            popupHtml.push('        <div class="controls"><button type="button" class="btn btn-default complete">Завершить</button></div>');
            popupHtml.push('    </div>');

            $(triggerElement).popover({
                html: true,
                title: function () {
                    return '<div class="head">' + title + '</div><span style="position:absolute;right:10px;top:9px;"><button type="button" onclick="this.parentNode.parentNode.parentNode.remove();" class="btn btn-xs">X</button></span>';
                },
                content: function () {
                    return popupHtml.join('');
                }
            });
        }
        $('.popover').remove();
        $(triggerElement).popover('show');
        $(triggerElement).parent().find('.popover input[type=text]').focus();
        $(triggerElement).parent().find('.popover button.complete').on('click', function() {
            var completionReason = $(triggerElement).parent().find('.popover input').val();
            var winner = $(triggerElement).parent().find('.popover input[type=radio]:checked').val();

            if (completionReason && completionReason.length > 0 && winner) {
                $(triggerElement).parent().find('.popover .validation-message').hide();

                var dataId = $(triggerElement).closest('tr[data-uid]').attr('data-uid');
                var data = $(triggerElement).closest('.k-grid').data('kendoGrid').dataSource.data();
                var models = data.filter(function(model) {
                    return model.uid === dataId;
                });
                if (models.length === 1) {
                    var match = {
                        Id: models[0].Id,
                        CompletionReason: completionReason,
                        WinnerId: models[0][winner].Id
                    };

                    var data = addAntiForgeryToken(match);

                    $.ajax({
                        url: "@Html.Raw(Url.Action("MatchComplete", "TournamentAdmin", new { tournamentId = Model.GeneralInfo.Id }))",
                        global: false,
                        data: data,
                        dataType: "json",
                        type: "POST",
                    }).done(function (response) {
                        okCallback && okCallback();
                        console.log('Match Completed');
                    });

                    $(triggerElement).popover('hide');
                }
            }
            else {
                $(triggerElement).parent().find('.popover .validation-message').show();
            }
        });
    }

    function playerIsWinner(match, player) {
        var isWinner = false;
        if (match.WinnerId === player.Id) {
            isWinner = true;
        }
        else if(match.SetResults && match.SetResults.length > 0){
            var completedCount = 0;
            var player1Sets = 0;
            var player2Sets = 0;
            for (var i = 0; i < match.SetResults.length; i++) {
                var setResult = match.SetResults[i];
                var setCompleted = (Math.abs(setResult.Player1TieBreak - setResult.Player2TieBreak) >= 2 && (setResult.Player1TieBreak >= 10 || setResult.Player2TieBreak >= 10)) ||
                                    (setResult.Player1Games + setResult.Player2Games == 13 || ((setResult.Player1Games >= 6 || setResult.Player2Games >= 6) && Math.abs(setResult.Player1Games - setResult.Player2Games) >= 2));
                if (setCompleted) {
                    completedCount++;
                    if (setResult.Player1TieBreak > setResult.Player2TieBreak || setResult.Player1Games > setResult.Player2Games) {
                        player1Sets++;
                    }
                    else if(setResult.Player1TieBreak < setResult.Player2TieBreak || setResult.Player1Games < setResult.Player2Games){
                        player2Sets++;
                    }
                }
            }
            var matchCompleted = completedCount === match.SetResults.length && match.SetResults.length > 1;
            if (matchCompleted) {
                if (player1Sets > player2Sets && match.Player1.Id === player.Id) {
                    isWinner = true;
                }
                else if(player1Sets < player2Sets && match.Player2.Id === player.Id) {
                    isWinner = true;
                }
            }
        }
        return isWinner;
    }

    function validateMatch(model, isCompleted) {
        var isValid = false;
        var messages = [];

        if (!isCompleted && model.MatchResultDisplay != null && model.MatchResultDisplay.length > 0) {
            var matchResultRegex = /^(\d\d?-\d\d?\s?)*$/;
            if (!matchResultRegex.test(model.MatchResultDisplay)) {
                messages.push('Результат матча должен содержать как минимум результат одного сета (сет может быть неполным)');
            }
        }
        if (model.Player1 == null || model.Player1.Id == null) {
            messages.push('Выберите Игрока №1');
        }
        if (model.Player2 == null || model.Player2.Id == null) {
            messages.push('Выберите Игрока №2');
        }
        if (model.StartDateTime != null && model.StartDateTime.length > 0) {
            var date = new Date(model.StartDateTime);
        }

        if (messages.length === 0) {
            isValid = true;
        }
        else {
            var validationMessage = "Невозможно сохранить матч:";
            for (var i = 0; i < messages.length; i++) {
                validationMessage += "\n- " + messages[i];
            }
            console.log(validationMessage);
            alert(validationMessage);
        }
        return isValid;
    }

    function formatDate(date) {
        var formattedDate = "";
        if(date && date.getTime) {
            var dayDate = date.getDate() > 9 ? date.getDate() : '0' + date.getDate();
            var month = (date.getMonth() + 1) > 9 ? (date.getMonth() + 1) : '0' + (date.getMonth() + 1);
            var hours = date.getHours() > 9 ? date.getHours() : '0' + date.getHours();
            var minutes = date.getMinutes() > 9 ? date.getMinutes() : '0' + date.getMinutes();

            formattedDate = dayDate + '.' + month + '.' + date.getFullYear() + ' ' + hours + ':' + minutes;
        }
        return formattedDate;
    }

    var playerLevels = [
        @{
            var levelValues = Enum.GetValues(typeof(PlayerLevel));
        }

        @for (int i = 0; i < levelValues.Length; i++)
        {
            var levelId = (int) levelValues.GetValue(i);
            var levelName = Enum.GetName(typeof(PlayerLevel), levelId);
            <text>
                { Id: @(levelId), Name: "@(levelName)" },
            </text>
        }
    ];

    var tournamentStages = [
        @{
            var stageValues = Enum.GetValues(typeof(TournamentStage));
        }

        @for (int i = 0; i < stageValues.Length; i++)
        {
            var stageId = (int)stageValues.GetValue(i);
            var stageName = Enum.GetName(typeof(TournamentStage), stageId);
            <text>
                { Id: @(stageId), Name: "@(stageName)" },
            </text>
        }
    ];

    var tournamentPlayers = [
        @for (int i = 0; i < Model.Players.Count; i++)
        {
            var player = Model.Players[i];
            <text>
                {
                    Id: @(player.Id),
                    Name: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(player.FullName)))"
                }
            </text>
            if (i != Model.Players.Count - 1)
            {
                <text>,</text>
            }
        }
    ];

    function initPlayersGrid() {
        $("#tournament-players-grid").kendoGrid({
            dataSource: {
                type: "json",
                transport: {
                    read: {
                        url: function(e) {
                            return "@Html.Raw(Url.Action("PlayersList", "TournamentAdmin", new { tournamentId = Model.GeneralInfo.Id }))";
                        },
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    },
                    create: {
                        url: function(player) {
                            var url = "@Html.Raw(Url.Action("PlayerInsert", "TournamentAdmin", new { tournamentId = Model.GeneralInfo.Id }))" + '&playerId=' + player.Id;
                            return url;
                        },
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    },
                    destroy: {
                        url: function(player) {
                            var url = "@Html.Raw(Url.Action("PlayerDelete", "TournamentAdmin", new { tournamentId = Model.GeneralInfo.Id }))" + '&playerId=' + player.Id;
                            return url;
                        },
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    }
                },
                schema: {
                    data: "Data",
                    total: "Total",
                    errors: "Errors",
                    model: {
                        id: "Id",
                        fields: {
                            Id: { editable: true, type: "number" },
                            FullName: { editable: true, validation: { required: true } },
                            LevelString: { editable: false },
                        }
                    }
                },
                requestEnd: function(e) {
                    if (e.type == "create" || e.type == "update" || e.type == "destroy") {
                        this.read();
                    }
                },
                error: function(e) {
                    display_kendoui_grid_error(e);
                    // Cancel the changes
                    this.cancelChanges();
                },
                serverPaging: true,
                serverFiltering: true,
                serverSorting: true
            },
            pageable: {
                refresh: true,
                numeric: false,
                previousNext: false,
                info: false
            },
            toolbar: ["create"],
            edit: function(e) {
                console.log('grid edit');
            },
            save: function(e) {
                console.log('grid save');
            },
            saveChanges: function(e) {
                console.log('grid saveChanges');
            },
            cancel: function(e) {
                console.log('grid cancel');
            },
            dataBound: function(){
                console.log('grid dataBound');
                $('#tournament-players-grid').find(".k-grid-edit").remove();
            },
            editable: {
                confirmation: true,
                mode: "inline"
            },
            scrollable: false,
            sortable: true,
            columns: [
                {
                    field: "Id",
                    title: "Игрок",
                    editor: function(container, options) {
                        playerDropDownFiltered(container, options, 'tournamentPlayerList');
                    },
                    template: function(model) {
                        return kendo.htmlEncode(model.FullName);
                    },
                    width: 200
                },
                {
                    field: "LevelString",
                    title: "Уровень",
                    width: 200
                },
                {
                    command: [
                        { name: "edit", text: '' },
                        { name: "destroy", text: '' },
                    ],
                    width: 30
                }
            ]
        });
    }

    function initMatchesGrid() {
        $("#tournament-matches-grid").kendoGrid({
            dataSource: {
                type: "json",
                transport: {
                    read: {
                        url: "@Html.Raw(Url.Action("MatchesList", "TournamentAdmin", new {tournamentId = Model.GeneralInfo.Id}))",
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    },
                    create: {
                        url: function(matchData) {
                            var url = "@Html.Raw(Url.Action("MatchInsert", "TournamentAdmin", new {tournamentId = Model.GeneralInfo.Id}))";
                            return url;
                        },
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    },
                    update: {
                        url: function(match) {
                            var url = "@Html.Raw(Url.Action("MatchUpdate", "TournamentAdmin", new {tournamentId = Model.GeneralInfo.Id}))";
                            return url;
                        },
                        type: "POST",
                        dataType: "json",
                        data: function(data) {
                            return addAntiForgeryToken(data);
                        }
                    },
                    destroy: {
                        url: function(match) {
                            var url = "@Html.Raw(Url.Action("MatchDelete", "TournamentAdmin", new { tournamentId = Model.GeneralInfo.Id }))"
                                + '&matchId=' + match.Id;
                            return url;
                        },
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    },
                    parameterMap: function (match, type) {
                        if (type == "create" || type == "update") {
                            match.StartDateTime = match.StartDateTime.toISOString();
                        }
                        return match;
                    }
                },
                schema: {
                    data: "Data",
                    total: "Total",
                    errors: "Errors",
                    model: {
                        id: "Id",
                        fields: {
                            Id: { editable: false, type: "number" },
                            Player1: {},
                            Player2: {},
                            MatchResultDisplay: { validation: { required: false } },
                            Stage: { type: "number" },
                            StartDateTime: { type: "date" }
                        }
                    }
                },
                requestEnd: function(e) {
                    if (e.type == "create" || e.type == "update") {
                        this.read();
                        $("#tournament-results-grid").data('kendoGrid').dataSource.read();
                    }
                },
                error: function(e) {
                    this.cancelChanges();
                },
                serverPaging: true,
                serverFiltering: true,
                serverSorting: true
            },
            pageable: {
                refresh: true,
                numeric: false,
                previousNext: false,
                info: false
            },
            toolbar: ["create"],
            edit: function(e) {
                console.log('grid edit');
            },
            save: function(e) {
                console.log('grid save');

                if (!validateMatch(e.model, false)) {
                    e.preventDefault();
                }
            },
            saveChanges: function(e) {
                console.log('grid saveChanges');
            },
            cancel: function(e) {
                console.log('grid cancel');
            },
            dataBound: function(){
                console.log('grid dataBound');
            },

            editable: {
                confirmation: true,
                mode: "inline"
            },
            scrollable: false,
            columns: [
                {
                    field: "Id",
                    title: "Матч",
                    attributes: {
                        style: "display:none;"
                    },
                    headerAttributes: {
                        style: "display:none;"
                    }
                },
                {
                    field: "StartDateTime",
                    title: "Дата",
                    editor: function(container, options) {
                        var date =  options.model.StartDateTime;
                        var minDate = new Date(2000,1,1);

                        if (date < minDate || options.model.isNew()) {
                            date = null;
                        }

                        $(container).append('<input type="text" class="match-datetime"/>');
                        $(container).find('.match-datetime').kendoDateTimePicker({
                            format: "dd.MM.yyyy HH:mm",
                            timeFormat: "HH:mm",
                            value: date,
                            change: function() {
                                options.model.set(options.field, this._value);
                            }
                        });
                    },
                    template: function(model) {
                        var dateDisplay = "";
                        var minDate = new Date(2000,1,1);
                        if (model.StartDateTime > minDate) {
                            dateDisplay = formatDate(model.StartDateTime);
                        }
                        return dateDisplay;
                    }
                },
                {
                    field: "Player1",
                    title: "Игрок 1",
                    editor: function(container, options) {
                        playerDropDownFiltered(container, options, 'tournamentMatchPlayer1List');
                    },
                    template: function(model) {
                        return model.Player1.FullName;
                    }
                },
                {
                    field: "Player2",
                    title: "Игрок 2",
                    editor: function(container, options) {
                        playerDropDownFiltered(container, options, 'tournamentMatchPlayer2List');
                    },
                    template: function(model) {
                        return model.Player2.FullName;
                    },
                },
                {
                    field: "MatchResultDisplay",
                    title: "Результат",
                    width: 50
                },
                {
                    field: "Stage",
                    title: "Стадия Турнира",
                    editor: function(container, options) {
                        genericDropDownEditor(container, options, tournamentStages, 4);
                    },
                    template: function(matchModel) {
                        var stages = tournamentStages.filter(function(item, index) {
                            return item.Id == matchModel.Stage;
                        });
                        var stageDisplay = stages.length === 1? stages[0].Name : 'N/A';
                        return stageDisplay;
                    },
                },
                {
                    command:  [
                        {
                            name: "complete",
                            text: 'Завершить',
                            click: function(e) {
                                completeMatch(e.target, 'Причина окончания', function() {
                                    $("#tournament-matches-grid").data('kendoGrid').dataSource.read();
                                    $("#tournament-results-grid").data('kendoGrid').dataSource.read();
                                });
                            }
                        },
                        { name: "edit", text: '' },
                        { name: "destroy", text: '' },
                    ],
                }
            ]
        });
    }



    function initResultsGrid() {
        $("#tournament-results-grid").kendoGrid({
            dataSource: {
                type: "json",
                transport: {
                    read: {
                        url: "@Html.Raw(Url.Action("ResultsList", "TournamentAdmin", new {tournamentId = Model.GeneralInfo.Id}))",
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    },
                    update: {
                        url: function(match) {
                            var url = "@Html.Raw(Url.Action("ResultUpdate", "TournamentAdmin", new {tournamentId = Model.GeneralInfo.Id}))";
                            return url;
                        },
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    },
                    destroy: {
                        url: function(match) {
                            var url = "@Html.Raw(Url.Action("MatchDelete", "TournamentAdmin", new { tournamentId = Model.GeneralInfo.Id }))"
                                + '&matchId=' + match.Id;
                            return url;
                        },
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    },
                    parameterMap: function (match, type) {
                        if (type == "create" || type == "update") {
                            if (match.StartDateTime && match.StartDateTime.toISOString) {
                                match.StartDateTime = match.StartDateTime.toISOString();
                            }
                        }
                        return match;
                    }
                },
                schema: {
                    data: "Data",
                    total: "Total",
                    errors: "Errors",
                    model: {
                        id: "Id",
                        fields: {
                            Id: { editable: false, type: "number" },
                            Player1: {},
                            Player2: {},
                            MatchResultDisplay: { validation: { required: false } },
                            Stage: { type: "number" },
                            StartDateTime: { type: "date" }
                        }
                    }
                },
                requestEnd: function(e) {
                    if (e.type == "create" || e.type == "update") {
                        this.read();
                    }
                },
                error: function(e) {
                    this.cancelChanges();
                },
                serverPaging: true,
                serverFiltering: true,
                serverSorting: true
            },
            pageable: {
                refresh: true,
                numeric: false,
                previousNext: false,
                info: false
            },
            edit: function(e) {
                console.log('grid edit');
            },
            save: function(e) {
                console.log('grid save');

                if (!validateMatch(e.model, true)) {
                    e.preventDefault();
                }
            },
            saveChanges: function(e) {
                console.log('grid saveChanges');
            },
            cancel: function(e) {
                console.log('grid cancel');
            },
            dataBound: function(){
                console.log('grid dataBound');
            },

            editable: {
                confirmation: true,
                mode: "inline"
            },
            scrollable: false,
            columns: [
                {
                    field: "Id",
                    title: "Матч",
                    attributes: {
                        style: "display:none;"
                    },
                    headerAttributes: {
                        style: "display:none;"
                    }
                },
                {
                    field: "StartDateTime",
                    title: "Дата",
                    editor: function(container, options) {
                        var date =  options.model.StartDateTime;
                        var minDate = new Date(2000,1,1);

                        if (date < minDate || options.model.isNew()) {
                            date = null;
                        }

                        $(container).append('<input type="text" class="result-datetime"/>');
                        $(container).find('.result-datetime').kendoDateTimePicker({
                            format: "dd.MM.yyyy HH:mm",
                            timeFormat: "HH:mm",
                            value: date,
                            change: function() {
                                options.model[options.field] = this._value.toISOString();
                                options.model.dirty = true;
                            }
                        });
                    },
                    template: function(model) {
                        var dateDisplay = "";
                        var minDate = new Date(2000,1,1);
                        if (model.StartDateTime > minDate) {
                            dateDisplay = formatDate(model.StartDateTime);
                        }
                        return dateDisplay;
                    }
                },
                {
                    field: "Player1",
                    title: "Игрок 1",
                    editor: function(container, options) {
                        playerDropDownFiltered(container, options, 'tournamentResultPlayer1List');
                    },
                    template: function(match) {
                        var classes = '';
                        if(playerIsWinner(match, match.Player1)) {
                            classes += "winner";
                        }

                        var html = '<span class="' + classes + '">' + match.Player1.FullName + '</span>';
                        return html;
                    }
                },
                {
                    field: "Player2",
                    title: "Игрок 2",
                    editor: function(container, options) {
                        playerDropDownFiltered(container, options, 'tournamentResultPlayer2List');
                    },
                    template: function(match) {
                        var classes = '';
                        if(playerIsWinner(match, match.Player2)) {
                            classes += "winner";
                        }

                        var html = '<span class="' + classes + '">' + match.Player2.FullName + '</span>';
                        return html;
                    },
                },
                {
                    field: "MatchResultDisplay",
                    title: "Результат",
                    width: 50
                },
                {
                    field: "Stage",
                    title: "Стадия Турнира",
                    editor: function(container, options) {
                        genericDropDownEditor(container, options, tournamentStages, 4);
                    },
                    template: function(matchModel) {
                        var stages = tournamentStages.filter(function(item, index) {
                            return item.Id == matchModel.Stage;
                        });
                        var stageDisplay = stages.length === 1? stages[0].Name : 'N/A';
                        return stageDisplay;
                    },
                },
                {
                    command:  [
                        { name: "edit", text: '' },
                        { name: "destroy", text: '' },
                    ],
                }
            ]
        });
    }

</script>

@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

@helper TabInfo()
{
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.GeneralInfo.Name):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.GeneralInfo.Name)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.GeneralInfo.Type):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.GeneralInfo.Type, ((TournamentType)Model.GeneralInfo.Type).ToSelectList())
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.GeneralInfo.StartDate):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.GeneralInfo.StartDate)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.GeneralInfo.EndDate):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.GeneralInfo.EndDate)
            </td>
        </tr>
    </table>
}
@helper TabPlayers()
{
if (Model.GeneralInfo.Id > 0)
{
        <div id="tournament-players-grid"></div>
}
else
{
        @T("Admin.Tournament.SaveBeforeEdit")
}
}
@helper TabMatches()
{
if (Model.GeneralInfo.Id > 0)
{
        <div id="tournament-matches-grid"></div>
}
else
{
        @T("Admin.Tournament.SaveBeforeEdit")
}
}
@helper TabResults()
{
if (Model.GeneralInfo.Id > 0)
{
        <div id="tournament-results-grid"></div>
}
else
{
        @T("Admin.Tournament.SaveBeforeEdit")
}
}