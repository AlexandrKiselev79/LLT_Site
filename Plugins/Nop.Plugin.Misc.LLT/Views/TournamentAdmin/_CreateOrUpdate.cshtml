@model Nop.Plugin.Misc.LLT.Models.Tournament.TournamentModel

@using Nop.Plugin.Misc.LLT.Enums
@using Nop.Core.Infrastructure
@using Nop.Web.Framework.UI;
@using Nop.Web.Framework.Events
@using Nop.Services.Events
@{
    Html.AddScriptParts("~/Scripts/jquery.tmpl.min.js");
}
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)



<div id="tournament-edit">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            Информация
        </li>
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            Матчи
        </li>
        <li @Html.RenderSelectedTabIndex(2, GetSelectedTabIndex())>
            Результаты
        </li>
    </ul>
    <div>
        @TabInfo()
    </div>
    <div>
        @TabPlayers()
    </div>
    <div>
        @TabMatches()
    </div>
    <div>
        @TabResults()
    </div>
</div>
<script>
    $(document).ready(function() {
        $("#tournament-edit").kendoTabStrip({
            animation:  {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>


@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

@helper TabInfo()
{
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Name):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Name)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Type):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.Type, ((TournamentType)Model.Type).ToSelectList())
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.StartDate):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.StartDate)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.EndDate):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.EndDate)
            </td>
        </tr>
    </table>
}
@helper TabPlayers()
{
        if (Model.Id > 0)
        {
            
        }
        else
        {
            @T("Admin.Promotions.Discounts.Requirements.SaveBeforeEdit")
        }
}
@helper TabMatches()
{
        if (Model.Id > 0)
        {
            <script type="text/javascript">
            
                    $(document).ready(function () {
            
                        $("#@Html.FieldIdFor(model => model.AddDiscountRequirement)").change(loadNewRequirementBox);

                        //load add requirement box
                        loadNewRequirementBox();

                        //load existing requirements
                        loadExistingRequirements();
                           
                       //adding requirement event
                       $("#discountRequirementContainer").bind('nopnewdiscountruleadded', function(event, newRequirementId) {
  
                           var discountId = @Model.Id;
                   
                           var postData = {
                               discountRequirementId: newRequirementId,
                               discountId: discountId
                           };
                           addAntiForgeryToken(postData);

                            $.ajax({
                                cache:false,
                                type: "POST",
                                url: "@(Url.Action("GetDiscountRequirementMetaInfo", "Discount"))",
                                data: postData,
                                success: function (result) {                            
                                    discountRequirements.push({ discountRequirementId: newRequirementId, ruleName : result.ruleName, url : result.url });
                                    loadExistingRequirements();
                                },
                                error:function (xhr, ajaxOptions, thrownError) {
                                    alert('Failed to load new discount requirement info. Please refresh the page');
                                }
                            });

                       });
                    });

                
                    //load requirement HTML
                    function loadRequirement(configureRuleUrl, placeholderName) {
                        $.ajax({
                            cache:false,
                            url: configureRuleUrl,
                            dataType: "html",
                            success: function (result) {
                                $(placeholderName).html(result);
                            },
                            error:function (xhr, ajaxOptions, thrownError) {
                                $(placeholderName).html('Failed to load requirement content.');
                            }
                        });
                    }

                    //load HTML for adding requirement
                    function loadNewRequirementBox() {
                        //load URL
                        var ruleSystemName = $("#@Html.FieldIdFor(model => model.AddDiscountRequirement)").val();
                        var discountId = @Model.Id;
                        if (ruleSystemName != '') {
                            $.ajax({
                                cache:false,
                                url: "@(Url.Action("GetDiscountRequirementConfigurationUrl", "Discount"))",
                                data: { "systemName": ruleSystemName, "discountId": discountId },
                                success: function (result) {
                                        var configureRuleUrl = result.url;
                                        //now load the content
                                        loadRequirement(configureRuleUrl, '#addrequirementplaceholder');
                                },
                                error:function (xhr, ajaxOptions, thrownError){
                                    $('#addrequirementplaceholder').html('Failed to load requirement URL');
                                }  
                            });
                        }
                        else {
                            $('#addrequirementplaceholder').html('');
                        }
                    }

                   //array of exisiting discount requirements
                   var discountRequirements = [
                            @for (int i = 0; i < Model.DiscountRequirementMetaInfos.Count; i++)
                            {
                                var drmi = Model.DiscountRequirementMetaInfos[i];
                                <text>{ discountRequirementId: @(drmi.DiscountRequirementId), ruleName: "@(drmi.RuleName)", url:  "@(Html.Raw(drmi.ConfigurationUrl))" } </text> if (i != Model.DiscountRequirementMetaInfos.Count - 1)
                                                                                                                                                                                 {<text>, </text>}

                            }
                       ];
           
                   //load HTML for exisiting requirements
                   function loadExistingRequirements() {
                       $("#discountRequirementContainer").html('');
                       $("#discountRequirementTemplate").tmpl(discountRequirements).appendTo("#discountRequirementContainer");

                       var discountRequirementsLen = discountRequirements.length;
                       for (var i=0; i<discountRequirementsLen; i++) {
                           var url = discountRequirements[i].url;
                           var discountRequirementId = discountRequirements[i].discountRequirementId;
                           var placeholderName = '#editrequirementplaceholder' + discountRequirementId;
                           $(placeholderName).html('loading...');
                           loadRequirement(url, placeholderName);
                       }
                   }

                   //delete requirement rule
                   function deleteRequirement(discountRequirementId) {           
                       var discountId = @Model.Id;
               
                       var postData = {
                           discountRequirementId: discountRequirementId,
                           discountId: discountId
                       };
                       addAntiForgeryToken(postData);

                        $.ajax({
                            cache: false,
                            type: "POST",
                            url: "@(Url.Action("DeleteDiscountRequirement", "Discount"))",
                            data: postData,
                            success: function (data) {
                                removeRequirementByElement(discountRequirements, discountRequirementId);
                                loadExistingRequirements();
                            },
                            error:function (xhr, ajaxOptions, thrownError){
                                alert('Failed to delete requirement.');
                            }
                        });

                
                    function removeRequirementByElement(arrayName,discountRequirementId) {
                        for(var i=0; i<arrayName.length; i++) {
                            if(arrayName[i].discountRequirementId==discountRequirementId) {
                                arrayName.splice(i,1);
                            }
                        }
                     }

                }

            </script>
            <!-- Template container -->
            <div id="discountRequirementContainer">
            </div>
            <!-- Discount requirement template -->
            <script id="discountRequirementTemplate" type="text/html">
                    <div id="editrequirement{{= discountRequirementId }}">
                        <div>@T("Admin.Promotions.Discounts.Requirements.DiscountRequirementType"): <strong>{{= ruleName }}</strong></div>
                        <div id="editrequirementplaceholder{{= discountRequirementId }}" style="float:left;"></div>
                        <div style="float:right;">
                            <input type="button" id="deleterequirement{{= discountRequirementId }}" onclick="deleteRequirement({{= discountRequirementId }})" class="k-button" value="@T("Admin.Promotions.Discounts.Requirements.Remove")" />
                        </div>
                        <table class="adminContent">
                            <tr class="adminSeparator">
                                <td colspan="2">
                                    <hr />
                                </td>
                            </tr>
                        </table>
                    </div>
            </script>
            
            <table class="adminContent">
                <tr>
                    <td colspan="2">
                        <strong>@T("Admin.Promotions.Discounts.Requirements.AddNew")</strong>
                    </td>
                </tr>
                <tr>
                    <td class="adminTitle">
                        @Html.NopLabelFor(model => model.AddDiscountRequirement):
                    </td>
                    <td class="adminData">
                        @Html.DropDownListFor(model => model.AddDiscountRequirement, Model.AvailableDiscountRequirementRules)
                        @Html.ValidationMessageFor(model => model.AddDiscountRequirement)
                    </td>
                </tr>
            </table>
            <table class="adminContent">
                <tr>
                    <td colspan="2">
                        <div id="addrequirementplaceholder">
                        </div>
                    </td>
                </tr>
            </table>
        }
        else
        {
            @T("Admin.Promotions.Discounts.Requirements.SaveBeforeEdit")
        }
}
@helper TabResults()
{
    if (Model.Id > 0)
    {
        <table class="adminContent">
            <tr>
                <td>

                    <div id="products-grid"></div>

                    <script>
                        $(document).ready(function () {
                            $("#products-grid").kendoGrid({
                                dataSource: {
                                    type: "json",
                                    transport: {
                                        read: {
                                            url: "@Html.Raw(Url.Action("ProductList", "Discount", new { discountId = Model.Id }))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        },
                                        destroy: {
                                            url: "@Html.Raw(Url.Action("ProductDelete", "Discount", new { discountId = Model.Id }))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        }
                                    },
                                    schema: {
                                        data: "Data",
                                        total: "Total",
                                        errors: "Errors",
                                        model: {
                                            id: "ProductId",
                                            fields: {
                                                ProductName: {editable: false, type: "string" },
                                                ProductId: {editable: false, type: "number" }
                                            }
                                        }
                                    },
                                    error: function(e) {
                                        display_kendoui_grid_error(e);
                                        // Cancel the changes
                                        this.cancelChanges();
                                    },
                                    serverPaging: true,
                                    serverFiltering: true,
                                    serverSorting: true
                                },
                                pageable: {
                                    refresh: true,
                                    numeric: false,
                                    previousNext: false,
                                    info: false
                                },
                                editable: {
                                    confirmation: false,
                                    mode: "inline"
                                },
                                scrollable: false,
                                columns: [{
                                    field: "ProductName",
                                    title: "@T("Admin.Promotions.Discounts.AppliedToProducts.Product")"
                                },  {
                                    field: "ProductId",
                                    title: "@T("Admin.Common.View")",
                                    width: 150,
                                    template: '<a href="@Url.Content("~/Admin/Product/Edit/")#=ProductId#">@T("Admin.Common.View")</a>'
                                }, {
                                    command: [{
                                        name: "destroy",
                                        text: "@T("Admin.Common.Delete")"
                                    }],
                                    width: 150
                                }]
                            });
                        });
                    </script>
                </td>
            </tr>
            <tr>
                <td width="100%">
                    <input type="submit" id="btnAddNewProduct" value="@T("Admin.Promotions.Discounts.AppliedToProducts.AddNew")" onclick="javascript:OpenWindow('@(Url.Action("ProductAddPopup", "Discount", new { discountId = Model.Id, btnId = "btnRefreshProducts", formId = "discount-form" }))', 800, 800, true); return false;" class="k-button" />
                    <input type="submit" id="btnRefreshProducts" style="display: none" />
                    <script type="text/javascript">
                        $(document).ready(function () {
                            $('#btnRefreshProducts').click(function () {
                                //refresh grid
                                var grid = $("#products-grid").data('kendoGrid');
                                grid.dataSource.read();

                                //return false to don't reload a page
                                return false;
                            });
                        });
                    </script>
                </td>
            </tr>
        </table>
    }
    else
    {
        @T("Admin.Promotions.Discounts.AppliedToProducts.SaveBeforeEdit")
    }
}